// Code generated by MockGen. DO NOT EDIT.
// Source: pool.go

// Package mock_redis is a generated GoMock package.
package redis

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockbufQuantile is a mock of bufQuantile interface
type MockbufQuantile struct {
	ctrl     *gomock.Controller
	recorder *MockbufQuantileMockRecorder
}

// MockbufQuantileMockRecorder is the mock recorder for MockbufQuantile
type MockbufQuantileMockRecorder struct {
	mock *MockbufQuantile
}

// NewMockbufQuantile creates a new mock instance
func NewMockbufQuantile(ctrl *gomock.Controller) *MockbufQuantile {
	mock := &MockbufQuantile{ctrl: ctrl}
	mock.recorder = &MockbufQuantileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockbufQuantile) EXPECT() *MockbufQuantileMockRecorder {
	return m.recorder
}

// observe mocks base method
func (m *MockbufQuantile) observe(arg0 float64) {
	m.ctrl.Call(m, "observe", arg0)
}

// observe indicates an expected call of observe
func (mr *MockbufQuantileMockRecorder) observe(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "observe", reflect.TypeOf((*MockbufQuantile)(nil).observe), arg0)
}

// results mocks base method
func (m *MockbufQuantile) results() map[float64]float64 {
	ret := m.ctrl.Call(m, "results")
	ret0, _ := ret[0].(map[float64]float64)
	return ret0
}

// results indicates an expected call of results
func (mr *MockbufQuantileMockRecorder) results() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "results", reflect.TypeOf((*MockbufQuantile)(nil).results))
}

// count mocks base method
func (m *MockbufQuantile) count() int {
	ret := m.ctrl.Call(m, "count")
	ret0, _ := ret[0].(int)
	return ret0
}

// count indicates an expected call of count
func (mr *MockbufQuantileMockRecorder) count() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "count", reflect.TypeOf((*MockbufQuantile)(nil).count))
}

// MockinternalPool is a mock of internalPool interface
type MockinternalPool struct {
	ctrl     *gomock.Controller
	recorder *MockinternalPoolMockRecorder
}

// MockinternalPoolMockRecorder is the mock recorder for MockinternalPool
type MockinternalPoolMockRecorder struct {
	mock *MockinternalPool
}

// NewMockinternalPool creates a new mock instance
func NewMockinternalPool(ctrl *gomock.Controller) *MockinternalPool {
	mock := &MockinternalPool{ctrl: ctrl}
	mock.recorder = &MockinternalPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockinternalPool) EXPECT() *MockinternalPoolMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockinternalPool) Get() (*conn, error) {
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(*conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockinternalPoolMockRecorder) Get() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockinternalPool)(nil).Get))
}

// Put mocks base method
func (m *MockinternalPool) Put(arg0 *conn) {
	m.ctrl.Call(m, "Put", arg0)
}

// Put indicates an expected call of Put
func (mr *MockinternalPoolMockRecorder) Put(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockinternalPool)(nil).Put), arg0)
}
